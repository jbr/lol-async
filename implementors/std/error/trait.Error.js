(function() {var implementors = {};
implementors["lol_html"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"lol_html/errors/enum.RewritingError.html\" title=\"enum lol_html::errors::RewritingError\">RewritingError</a>","synthetic":false,"types":["lol_html::rewriter::RewritingError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"lol_html/errors/struct.MemoryLimitExceededError.html\" title=\"struct lol_html::errors::MemoryLimitExceededError\">MemoryLimitExceededError</a>","synthetic":false,"types":["lol_html::memory::limiter::MemoryLimitExceededError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"lol_html/errors/struct.ParsingAmbiguityError.html\" title=\"struct lol_html::errors::ParsingAmbiguityError\">ParsingAmbiguityError</a>","synthetic":false,"types":["lol_html::parser::tree_builder_simulator::ambiguity_guard::ParsingAmbiguityError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"lol_html/errors/enum.TagNameError.html\" title=\"enum lol_html::errors::TagNameError\">TagNameError</a>","synthetic":false,"types":["lol_html::rewritable_units::element::TagNameError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"lol_html/errors/enum.AttributeNameError.html\" title=\"enum lol_html::errors::AttributeNameError\">AttributeNameError</a>","synthetic":false,"types":["lol_html::rewritable_units::tokens::attributes::AttributeNameError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"lol_html/errors/enum.CommentTextError.html\" title=\"enum lol_html::errors::CommentTextError\">CommentTextError</a>","synthetic":false,"types":["lol_html::rewritable_units::tokens::comment::CommentTextError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"lol_html/errors/enum.SelectorError.html\" title=\"enum lol_html::errors::SelectorError\">SelectorError</a>","synthetic":false,"types":["lol_html::selectors_vm::error::SelectorError"]}];
implementors["proc_macro2"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"proc_macro2/struct.LexError.html\" title=\"struct proc_macro2::LexError\">LexError</a>","synthetic":false,"types":["proc_macro2::LexError"]}];
implementors["rand"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"rand/distributions/enum.WeightedError.html\" title=\"enum rand::distributions::WeightedError\">WeightedError</a>","synthetic":false,"types":["rand::distributions::weighted::WeightedError"]}];
implementors["rand_jitter"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"rand_jitter/enum.TimerError.html\" title=\"enum rand_jitter::TimerError\">TimerError</a>","synthetic":false,"types":["rand_jitter::error::TimerError"]}];
implementors["syn"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"syn/parse/struct.Error.html\" title=\"struct syn::parse::Error\">Error</a>","synthetic":false,"types":["syn::error::Error"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()